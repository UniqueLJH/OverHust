package com.unique.overhust.fragment;

import java.util.*;
import java.io.*;

class MyMap {
    static double[] dis = new double[400];  //
    static int[] pre = new int[400];
    static double[][] w = new double[200][200];
    static int[] edgenum = new int[200];
    static int[][] edge = new int[200][200];
    static boolean[] vis = new boolean[200];
    static int[] path = new int[400];
    //static double[] x = new double[200];
    static double[] x = {0, 30.508616, 30.5084, 30.508279, 30.509627, 30.509738, 30.509965, 30.510732, 30.511079, 30.511379, 30.511772, 30.51173, 30.511633, 30.513385, 30.51377, 30.515221, 30.515526, 30.515552, 30.515455, 30.516519, 30.516422, 30.515369, 30.514463, 30.51362, 30.516282, 30.515238, 30.514325, 30.513429, 30.512421, 30.511432, 30.510529, 30.510284, 30.512272, 30.512748, 30.509484, 30.509318, 30.509827, 30.510349, 30.509181, 30.508025, 30.509063, 30.510058, 30.511259, 30.511102, 30.512221, 30.512073, 30.513219, 30.513043, 30.514175, 30.51399, 30.515047, 30.514899, 30.516129, 30.517044, 30.518015, 30.517775, 30.516896, 30.515981, 30.515735, 30.515707, 30.513766, 30.512796, 30.511853, 30.511613, 30.510864, 30.510938, 30.509843, 30.509307, 30.509186, 30.509658, 30.510693, 30.510508, 30.511433, 30.511742, 30.51152, 30.512676, 30.512509, 30.513563, 30.513563, 30.514432, 30.515495, 30.515351, 30.514288, 30.514051, 30.513958, 30.514966, 30.513866, 30.513274, 30.513709, 30.513478, 30.51223, 30.512212, 30.512221, 30.512276, 30.513247, 30.512433, 30.512341, 30.512158, 30.512158, 30.51152, 30.511215, 30.51103, 30.510753, 30.510587, 30.510254, 30.509727, 30.508533, 30.51479, 30.515049, 30.511823, 30.511976, 30.512045, 30.51138, 30.511042, 30.511093, 30.511264, 30.510446, 30.510169, 30.50979, 30.509442, 30.509118, 30.508785, 30.515759, 30.516166, 30.516166, 30.516365, 30.515511, 30.514212, 30.514772, 30.509180, 30.513330, 0};
    //static double[] y = new double[200];
    static double[] y = {0, 114.408577, 114.407103, 114.406268, 114.405962, 114.406719, 114.408307, 114.405754, 114.40812, 114.405585, 114.408002, 114.405534, 114.404429, 114.405282, 114.407621, 114.405094, 114.407264, 114.407275, 114.408284, 114.408462, 114.40932, 114.409186, 114.409127, 114.408993, 114.411139, 114.411048, 114.41093, 114.410855, 114.410662, 114.410608, 114.410498, 114.410466, 114.408977, 114.40961, 114.410401, 114.412177, 114.412201, 114.41233, 114.413542, 114.413365, 114.414824, 114.414991, 114.412437, 114.414529, 114.41263, 114.414722, 114.412748, 114.414733, 114.412791, 114.414862, 114.41289, 114.41494, 114.413043, 114.413171, 114.413236, 114.415585, 114.415285, 114.415103, 114.417556, 114.417556, 114.417312, 114.417237, 114.417087, 114.41714, 114.417022, 114.41552, 114.41537, 114.415284, 114.416851, 114.416904, 114.418894, 114.420793, 114.41899, 114.419028, 114.420916, 114.419146, 114.421023, 114.419264, 114.419264, 114.419382, 114.419543, 114.421321, 114.429614, 114.432049, 114.43338, 114.433487, 114.434356, 114.434303, 114.435601, 114.436802, 114.436641, 114.43545, 114.434709, 114.434173, 114.432338, 114.432252, 114.43325, 114.432199, 114.430782, 114.433186, 114.432091, 114.434462, 114.432059, 114.432918, 114.432027, 114.433143, 114.431717, 114.405378, 114.407319, 114.40438, 114.402953, 114.401977, 114.401982, 114.402003, 114.402931, 114.404326, 114.421283, 114.421187, 114.421133, 114.42109, 114.421036, 114.420961, 114.432747, 114.432886, 114.432886, 114.433715, 114.433881, 114.434412, 114.426234, 114.431921, 114.431942, 0};
    static int[] linka = {1, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 11, 11, 13, 13, 14, 14, 16, 16, 17, 18, 18, 19, 20, 20, 21, 21, 22, 22, 23, 24, 24, 25, 25, 26, 26, 27, 27, 29, 29, 30, 30, 31, 31, 34, 35, 35, 35, 36, 37, 37, 38, 38, 39, 40, 40, 41, 42, 43, 43, 44, 44, 45, 45, 45, 46, 46, 47, 47, 48, 48, 49, 49, 50, 50, 51, 51, 52, 52, 53, 53, 54, 55, 56, 57, 58, 58, 59, 59, 60, 60, 61, 61, 62, 62, 63, 63, 64, 64, 64, 65, 66, 66, 67, 68, 70, 70, 71, 72, 73, 73, 74, 75, 75, 76, 77, 77, 78, 79, 80, 81, 81, 82, 82, 83, 83, 84, 84, 84, 86, 87, 87, 88, 88, 89, 90, 91, 92, 92, 93, 94, 94, 95, 95, 97, 97, 97, 100, 100, 101, 102, 102, 103, 104, 106, 107, 107, 108, 108, 109, 109, 109, 110, 110, 111, 112, 113, 114, 116, 116, 117, 118, 119, 120, 122, 122, 123, 124, 125, 126};
    static int[] linkb = {2, 6, 3, 5, 4, 5, 7, 6, 8, 31, 9, 8, 10, 29, 10, 11, 14, 12, 13, 15, 14, 23, 16, 17, 22, 18, 19, 21, 20, 24, 21, 25, 22, 23, 26, 27, 52, 25, 26, 50, 27, 48, 28, 46, 30, 42, 31, 37, 36, 34, 35, 36, 38, 39, 37, 41, 42, 39, 40, 40, 41, 67, 43, 43, 45, 65, 45, 46, 46, 47, 62, 47, 48, 61, 49, 49, 50, 51, 60, 51, 52, 59, 57, 57, 53, 54, 56, 55, 56, 57, 58, 59, 80, 79, 60, 61, 77, 62, 75, 63, 73, 72, 64, 65, 69, 70, 66, 69, 67, 68, 69, 71, 72, 74, 73, 75, 74, 76, 76, 77, 78, 79, 79, 81, 80, 81, 82, 128, 83, 128, 84, 130, 85, 86, 94, 87, 88, 93, 89, 91, 90, 91, 92, 93, 101, 96, 95, 130, 96, 97, 98, 99, 100, 101, 102, 105, 103, 104, 105, 106, 129, 15, 108, 17, 16, 12, 110, 115, 111, 114, 112, 113, 114, 115, 71, 117, 118, 119, 120, 121, 85, 123, 124, 125, 126, 127};
    static int[] angle = new int[200];
    static String[] name = {"韵苑1栋", "韵苑2栋", "韵苑3栋", "韵苑4栋", "韵苑5栋", "韵苑6栋", "韵苑7栋", "韵苑8栋", "韵苑9栋", "韵苑10栋", "韵苑11栋", "韵苑12栋", "韵苑13栋", "韵苑14栋", "韵苑15栋", "韵苑16栋", "韵苑17栋", "韵苑18栋", "韵苑19栋", "韵苑20栋", "韵苑21栋", "韵苑22栋", "韵苑23栋", "韵苑24栋", "韵苑25栋", "韵苑26栋", "韵苑27栋", "紫松1栋", "紫松2栋", "紫松3栋", "紫松4栋", "紫松5栋", "紫松6栋", "紫松7栋", "紫松8栋", "紫松9栋", "紫松10栋", "紫松11栋", "紫松12栋", "紫松13栋", "东1舍", "东2舍", "东3舍", "东4舍", "东5舍", "东6舍", "东7舍", "东8舍", "东9舍", "东10舍", "东11舍", "东12舍", "东13舍", "西1舍", "西2舍", "西3舍", "西4舍", "西5舍", "西6舍", "西7舍", "西8舍", "西9舍", "西10舍", "西11舍", "西12舍", "西13舍", "西1楼", "西2楼", "西3楼", "西4楼", "西5楼", "西6楼", "西7楼", "西8楼", "西9楼", "西12楼", "南1楼", "南2楼", "南3楼", "南4楼", "南5楼", "南6楼", "东1楼", "东2楼", "东3楼", "东4楼", "东5楼", "东6楼", "东7楼", "东8楼", "东9楼", "东12楼", "毛主席像", "动模实验室", "西十二教学楼", "西十二老子像", "煤燃烧实验室", "化学楼", "西操场", "西边体育馆", "百惠园", "音乐中心", "西区澡堂", "西二食堂", "西一食堂", "百景园", "青年园", "主图书馆(新馆)", "主图书馆(旧馆)", "逸夫科技楼", "大学生活动中心", "华科附小", "集贸市场", "百味园", "喻园餐厅", "管理学院", "机械学院", "网络中心(主校区机房)", "光谷体育馆", "中操场", "喻园小区", "东九教学楼", "韵苑食堂", "东篱食堂", "韵苑体育馆", "东十二教学楼", "东校区图书馆", "启明学院", "软件学院", "学一食堂", "学二食堂", "东操场", "游泳馆", "八号楼", "十号楼"};
    static double[] namex = {30.511470, 30.511783, 30.512213, 30.512606, 30.512606, 30.514870, 30.514778, 30.515208, 30.515208, 30.515490, 30.515425, 30.515855, 30.514213, 30.514121, 30.514014, 30.514333, 30.514269, 30.514199, 30.514148, 30.514634, 30.515003, 30.515284, 30.515598, 30.515811, 30.515968, 30.516176, 30.516176, 30.511208, 30.511808, 30.511115, 30.511226, 30.511713, 30.512009, 30.511029, 30.511186, 30.511186, 30.512129, 30.510918, 30.511084, 30.511583, 30.510650, 30.512120, 30.511750, 30.512203, 30.512397, 30.511158, 30.511638, 30.511693, 30.512387, 30.511924, 30.511638, 30.511160, 30.510855, 30.514603, 30.515056, 30.513623, 30.514958, 30.513507, 30.514736, 30.514112, 30.514704, 30.515074, 30.514796, 30.515259, 30.514344, 30.514066, 30.511071, 30.510434, 30.510184, 30.511367, 30.510545, 30.510101, 30.510914, 30.510646, 30.509851, 30.509036, 30.509519, 30.509500, 30.510073, 30.509389, 30.509001, 30.508751, 30.512181, 30.511589, 30.511478, 30.511312, 30.511783, 30.510924, 30.510850, 30.512892, 30.512128, 30.513409, 30.508872, 30.509588, 30.508941, 30.509052, 30.510854, 30.511307, 30.512620, 30.512647, 30.512148, 30.513544, 30.514293, 30.513941, 30.514154, 30.516095, 30.512749, 30.512712, 30.512093, 30.513812, 30.514293, 30.515088, 30.516668, 30.516659, 30.516067, 30.514912, 30.514912, 30.510152, 30.508100, 30.509477, 30.515531, 30.513383, 30.514069, 30.514852, 30.513069, 30.512276, 30.510418, 30.509346, 30.511061, 30.511343, 30.511860, 30.512887, 30.513682, 30.514989, 30.508792};
    static double[] namey = {114.432596, 114.432732, 114.432778, 114.432765, 114.432765, 114.432102, 114.432947, 114.432191, 114.432191, 114.432915, 114.433457, 114.432604, 114.433852, 114.434898, 114.436325, 114.433884, 114.434973, 114.436186, 114.436829, 114.434056, 114.433831, 114.434417, 114.434325, 114.433301, 114.434116, 114.433333, 114.433333, 114.404215, 114.404129, 114.403421, 114.403410, 114.403314, 114.403389, 114.402466, 114.402434, 114.402434, 114.402402, 114.401737, 114.401694, 114.401608, 114.421440, 114.420453, 114.419520, 114.419627, 114.417782, 114.421558, 114.421580, 114.420421, 114.421730, 114.421676, 114.421623, 114.421549, 114.421474, 114.406716, 114.406566, 114.406319, 114.405676, 114.408615, 114.405831, 114.409858, 114.408528, 114.408571, 114.407777, 114.407755, 114.407959, 114.407991, 114.406865, 114.407895, 114.408882, 114.409300, 114.410051, 114.410041, 114.406060, 114.406382, 114.407101, 114.407995, 114.413549, 114.411414, 114.411596, 114.410996, 114.415770, 114.415705, 114.415963, 114.415416, 114.416510, 114.418152, 114.418162, 114.417615, 114.418538, 114.416027, 114.434007, 114.427152, 114.413474, 114.408957, 114.407262, 114.408120, 114.405341, 114.407734, 114.406575, 114.408185, 114.404590, 114.405309, 114.407047, 114.405191, 114.406082, 114.407723, 114.409579, 114.412058, 114.412004, 114.412567, 114.414402, 114.414080, 114.414112, 114.415518, 114.414434, 114.416365, 114.416365, 114.413662, 114.418243, 114.419541, 114.424702, 114.427180, 114.431931, 114.434626, 114.434347, 114.433961, 114.432094, 114.430672, 114.434876, 114.432023, 114.432108, 114.431336, 114.432302, 114.411273, 114.432935};

    static int getLongitudeAndLatitude(String st) {
        for (int i = 0; i < name.length; i++) {
            if (st.equals(name[i])) return i;
        }
        return -1;
    }

    static double disAtoB(double x1, double y1, double x2, double y2) {
        double len1 = x1 - x2;
        double len2 = y1 - y2;
        return Math.sqrt(len1 * len1 + len2 * len2);
    }

    static void Initialization() {
        for (int i = 0; i < 200; i++) {
            dis[i] = 99999.0;
            pre[i] = i;
            vis[i] = false;

        }
    }

    static void addLink(int a, int b) {
        edgenum[a] = edgenum[a] + 1;
        edge[a][edgenum[a]] = b;
        edgenum[b] = edgenum[b] + 1;
        edge[b][edgenum[b]] = a;
        w[a][b] = disAtoB(x[a], y[a], x[b], y[b]) * 10000;
        w[b][a] = w[a][b];
    }

    static void fLink() {
        for (int i = 0; i < linka.length; i++) {
            addLink(linka[i], linkb[i]);
        }
    }

    static void addBusPath() {
        w[83][82] = -1.0;
        w[83][81] = -1.0;
        w[83][80] = -1.0;
        w[83][58] = -1.0;
        w[83][59] = -1.0;
        w[83][60] = -1.0;
        w[83][61] = -1.0;
        w[83][47] = -1.0;
        w[83][46] = -1.0;
        w[83][44] = -1.0;
        w[83][44] = -1.0;

    }

    static void decBusPath() {

    }

    static void addEndPoint(double x1, double y1) {
        x[0] = x1;
        y[0] = y1;
        double minlen = 9999.0;
        for (int i = 1; i < x.length - 1; i++) {
            double temp = disAtoB(x1, y1, x[i], y[i]);
            if (minlen > temp) minlen = temp;
        }

        for (int i = 1; i < x.length - 1; i++) {
            double temp = disAtoB(x1, y1, x[i], y[i]);
            if (1.13 * minlen >= temp) {
                addLink(0, i);
            }
        }


    }

    static void addStartPoint(double x1, double y1) {
        x[x.length - 1] = x1;
        y[x.length - 1] = y1;
        double minlen = 9999.0;
        for (int i = 1; i < x.length - 1; i++) {
            double temp = disAtoB(x1, y1, x[i], y[i]);
            if (minlen > temp) minlen = temp;
        }
        System.out.print(minlen);
        for (int i = 1; i < x.length - 1; i++) {
            double temp = disAtoB(x1, y1, x[i], y[i]);
            if (1.13 * minlen >= temp) {
                addLink(x.length - 1, i);
            }
        }

        //System.out.print(w[x.length-1][1]);
    }

    static boolean Relax(int u, int v, double w) {

        if (dis[u] + w < dis[v]) {
            dis[v] = dis[u] + w;
            pre[v] = u;

            return true;
        }
        return false;

    }

    static void SPFA(int s) {
        dis[s] = 0;

        int now = s;
        int head = 0;
        int tail = 0;
        int[] q = new int[400];
        int h1 = 0;
        int t1 = 0;
        q[head] = s;
        while (h1 <= t1) {
            now = q[head];
            for (int i = 1; i <= edgenum[now]; i++) {
                if (Relax(now, edge[now][i], w[now][edge[now][i]])) {
                    if (!vis[edge[now][i]]) {
                        tail = tail + 1;
                        t1 = t1 + 1;
                        q[tail] = edge[now][i];
                        vis[edge[now][i]] = true;
                    }
                }

            }
            vis[now] = false;
            head = head + 1;
            h1 = h1 + 1;
        }
    }

    static void fprint(int t) {
        //System.out.println(dis[t]);
        //System.out.print(t);
        int k = 0;
        path[0] = t;

        while (pre[t] != t) {
            //System.out.print("-+>");
            //System.out.print(pre[t]);
            t = pre[t];
            k = k + 1;
            path[k] = t;
        }
        //System.out.println();
        k = 0;
        while (path[k] != 0) {
            //System.out.print("-->");
            //System.out.print(path[k]);
            k = k + 1;
        }
        //System.out.print("-->");
        //System.out.print(0);
        //System.out.println();

    }

    static void pathAngle() {
        //System.out.println("** ");
        int i = 1;
        while (path[i] != 0) {
            double p1y = x[path[i]] - x[path[i - 1]];
            double p1x = y[path[i]] - y[path[i - 1]];
            /*
            System.out.print(i);
			System.out.print(',');
			System.out.print(p1x);
			System.out.print(',');
			System.out.print(p1y);
			System.out.print(',');
		*/
            angle[i] = 5;
            if ((p1x > 0) && (p1x > p1y) && (p1x > -p1y)) {
                angle[i] = 4;
            }//��
            if ((p1x < 0) && (p1x < p1y) && (p1x < -p1y)) {
                angle[i] = 2;
            } //��
            if ((p1y > 0) && (p1x < p1y) && (p1x > -p1y)) {
                angle[i] = 1;
            } //��
            if ((p1y < 0) && (p1x > p1y) && (p1x < -p1y)) {
                angle[i] = 3;
            } //��
            //System.out.println(angle[i]);
            i = i + 1;

        }
        i = 1;
        int[] tempangle = new int[30];

        while (angle[i] != 0) {
            if ((angle[i - 1] < 5) && (angle[i - 1] > 0) && (angle[i] < 5) && (angle[i] > 0) && (((angle[i - 1] - 1) % 4) == (angle[i] % 4))) {
                tempangle[i] = 1;
            } else {
                if ((angle[i - 1] < 5) && (angle[i - 1] > 0) && (angle[i] < 5) && (angle[i] > 0) && (((angle[i - 1] + 1) % 4) == (angle[i] % 4))) {
                    tempangle[i] = -1;
                } else {
                    tempangle[i] = 2;
                }
            }

            i = i + 1;
        }
        i = 1;
        while (angle[i] != 0) {
            angle[i] = tempangle[i];

            i = i + 1;
        }

        i = 1;
        while (angle[i] != 0) {
            //System.out.print(angle[i]);
            //System.out.print("--->");
            i = i + 1;
        }
        //	System.out.println("** ");
    }

    static void findpath(double sx, double sy, double es, double ey) {
        fLink();
        Initialization();
        addStartPoint(sx, sy);
        addEndPoint(es, ey);
        SPFA(0);
        fprint(x.length - 1);
        pathAngle();


    }
}


public class Spfa {

    /**
     * @param args
     * @throws java.io.IOException
     */
    public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub
        /*
         String txtpath=Thread.currentThread().getContextClassLoader().getResource("").getPath();
		
		 FileReader fr=new FileReader("C:\\Users\\Administrator\\Desktop\\ljh.txt");
		//"C:\\Users\\Administrator\\Desktop\\cs.txt"
		
        BufferedReader br=new BufferedReader(fr);
        String s= br.readLine();
    	
        while(s!=null){
        	String[] temps = s.split(" ");
        	
        	String[] temps1 = temps[1].split(",");   
        	//System.out.print("\"");
        	System.out.print(temps1[1]);
        	//System.out.print("\"");
        	System.out.print(',');
        	//MyMap.namex[Integer.parseInt(temps[1])]=Double.parseDouble(temps1[0]);
        	//MyMap.namey[Integer.parseInt(temps[1])]=Double.parseDouble(temps1[1]);
             s=br.readLine();
           }
        */
        //  System.out.print(MyMap.x[3]);
       /*
		   FileReader fr1 = new FileReader("C:\\Users\\Administrator\\Desktop\\cs_link.txt");
       // "C:\\Users\\Administrator\\Desktop\\cs_link.txt"
        BufferedReader br1 = new BufferedReader(fr1);
        String s1 = br1.readLine();
        while (s1!=null){
        String [] temps2 = s1.split(" ");
        
      
        int a = Integer.parseInt(temps2[0]);
       int b = Integer.parseInt(temps2[1]);
       //MyMap.addLink(a, b);
       System.out.print(b);
       System.out.print(",");
       
       
        s1=br1.readLine();
        }
        System.out.println();
		/* MyMap.fLink();
        MyMap.Initialization();
        MyMap.SPFA(30);
        MyMap.fprint(82);
        System.out.println("");
        */
       /* int t = 82;
        System.out.print(MyMap.x[t]);
        System.out.print(",");
        System.out.print(MyMap.y[t]);
      
        while (MyMap.pre[t]!=t)
        {
        	System.out.print("-->");
        	System.out.print(MyMap.x[MyMap.pre[t]]);
            System.out.print(",");
            System.out.print(MyMap.y[MyMap.pre[t]]);
			t= MyMap.pre[t];
        }
        */
        // MyMap.findpath(30.511079,114.408120,30.514175,114.412791);
        //String st1="���ٳ�";
        //System.out.print(MyMap.namex[MyMap.getLongitudeAndLatitude(st1)]);

      /*  for (int i= 0;i<=125;i++)
        {
        	System.out.print(MyMap.y[i]);
        	System.out.print(",");
        }
        */

    }


}
